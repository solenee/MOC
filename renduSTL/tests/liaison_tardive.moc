// assembleur inline en dehors d'une fonction
asm {
   CALL (LB) _main   ; appel au point d'entree du programme
   HALT              ; arret de la machine
   }

// Assembleur inline dans une fonction. 
 int * malloc(int taille){
 asm {
   LOAD %taille    ; acces au parametre taille
   SUBR Malloc        ; allocation
   RETURN (1) 1       
   }
 }
 
// la classe mere de toutes les classes
@class NSObject{
}
+(id)init {}
@end

// un point
@class Point2D : NSObject{
    int x;
    int y;
}
-(int)x {
    return x;
}
-(int)y {
    return y;
}
-(void)x:(int)a y:(int)b{
    x= a;
    y = b;
}
@end

// un point colore
@class Point2DCol:Point2D{
    int col;
}
-(int) colx{
  return col;
}
-(void) x:(int)a y:(int)b col:(int)c{
int z = [self colx];
    [self x:a y:b];
    col = 99;
}
-(void)x:(int)a y:(int)b{
    x= a+1;
    y = b+1;
}
@end

int main()
{
    Point2DCol * q;
    //if (YES) {
      q =  [Point2DCol init]; 
    //}
    //else {
    //  q =  [Point2D init];	
    //}
    [q x:4 y:3];
    [q x:7 y:8 col:21];
    int y = 4;    
    return y;
}
