; Generated code for tests/heritage.moc.
; Do not modify by hand
	; code de lancement du programme
	pointeurNull : LOADA 0[SB]
	CALL (LB) _main
	__npe :
 	HALT
	; code source du programme



	; code in inline : start
; inline code_asm


	CALL (LB) _main
	; appel au point d'entree du programme

	HALT
	; arret de la machine

	; code in inline : end
_malloc:
	; code in inline : start
; inline code_asm


	LOAD (1) -1[LB]
	; acces au parametre taille

	SUBR Malloc
	; allocation

	RETURN (1) 1


	; code in inline : end
	; fin d'un bloc : pop
	POP(0) 0

_fdouble:
	; declaration de a de taille 1 en [3/Register [name=LB, num=0]]
	PUSH 1
	LOADL 2	; entier
	STORE(1) 3[LB]
	; fin de declaration de a
	; retour
	; pas d'affectation : code de l'expression
	; operation binaire 
	; acces a a
	LOAD (1) 3[LB]
	; acces a x
	LOAD (1) -1[LB]
	SUBR IMul
	RETURN (1) 1
	; fin retour
	; fin d'un bloc : pop
	POP(0) 1

_NSObject_init:
	; generation du retour de l init
	; lecture du contenu de l'adresse de [-1/Register [name=LB, num=0]]
	LOADA -1[LB]
	; lecture indirecte
	LOADI (1)
	; modification de la tv instance
	; valeur affectee
	; lecture du contenu de l'etiquette de _NSObject_methode
	LOADA _NSObject_methode
	; affectation
	STOREI (1)
	; retour
	; lecture du contenu de l'adresse de [-1/Register [name=LB, num=0]]
	LOADA -1[LB]
	; lecture indirecte
	LOADI (1)
	RETURN (1) 1
	; fin retour
	; fin d'un bloc : pop
	POP(0) 0

	; retour
	RETURN (0) 1
	; fin retour
_NSObject_methode:
 	 JUMP _NSObject_init

_Point_vide:
	; fin d'un bloc : pop
	POP(0) 0

	; retour
	RETURN (0) 0
	; fin retour
_Point_methode:
 	 JUMP _Point_vide
	 JUMP _NSObject_init

_main:
	; declaration de c de taille 1 en [3/Register [name=LB, num=0]]
	PUSH 1
	; empilement des parametres
	; empilement des parametres
	; parametre de sous-programme
	; pas d'affectation : code de l'expression
	LOADL 4	; entier
	; charger le parametre ?
	; Appel de fdouble
	CALL(SB) _fdouble
	STORE(1) 3[LB]
	; fin de declaration de c
	; declaration de mere de taille 1 en [4/Register [name=LB, num=0]]
	PUSH 1
	; empilement des parametres
	LOADL 1
	SUBR Malloc
	; Appel de methode init
	; etiq :_NSObject_methode
	LOADL 0	; entier
	; lecture du contenu de l'etiquette de _NSObject_methode
	LOADA _NSObject_methode
	;Calcul deplacement struct 1
	LOADL 1
	SUBR Iadd
	CALLI
	STORE(0) 4[LB]
	; fin de declaration de mere
	; retour
	; pas d'affectation : code de l'expression
	LOADL 0	; entier
	RETURN (1) 0
	; fin retour
	; fin d'un bloc : pop
	POP(0) 2

